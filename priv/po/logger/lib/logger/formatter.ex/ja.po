msgid ""
msgstr ""
"Project-Id-Version: l 10n_logger\n"
"PO-Revision-Date: 2016-03-28 19:39+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def Logger.Formatter.compile(str)
#: lib/logger/formatter.ex:48
msgid ""
"Compiles a format string into an array that the `format/5` can handle.\n"
"\n"
"Check the module doc for documentation on the valid parameters. If you\n"
"pass `nil`, it defaults to: `$time $metadata [$level] $levelpad$message\\n`\n"
"\n"
"If you would like to make your own custom formatter simply pass\n"
"`{module, function}` to `compile/1` and the rest is handled.\n"
"\n"
"    iex> Logger.Formatter.compile(\"$time $metadata [$level] $message\\n\")\n"
"    [:time, \" \", :metadata, \" [\", :level, \"] \", :message, \"\\n\"]\n"
msgstr ""
"`format/5`が取り扱えるようにアレイにフォーマット文字列を\n"
"コンパイルします。\n"
"\n"
"有効なパラメータについてはモジュールドキュメントをチェッ\n"
"クしてください。もし`nil`を渡したら、デフォルトになります:\n"
"`$time $metadata [$level] $levelpad$message\\n`\n"
"\n"
"もし自身のカスタムフォーマッタを作りたいなら、`{module, function}`\n"
"を単に`compile/1`に渡すと、残りはそこでハンドルされます。\n"
"\n"
"    iex> Logger.Formatter.compile(\"$time $metadata [$level] $message\\n\")\n"
"    [:time, \" \", :metadata, \" [\", :level, \"] \", :message, \"\\n\"]\n"

#. TRANSLATORS: Elixir.Logger.Formatter Summary
#: lib/logger/formatter.ex:4
msgid ""
"Conveniences for formatting data for logs.\n"
"\n"
"This module allows developers to specify a string that\n"
"serves as template for log messages, for example:\n"
"\n"
"    $time $metadata[$level] $message\\n\n"
"\n"
"Will print error messages as:\n"
"\n"
"    18:43:12.439 user_id=13 [error] Hello\\n\n"
"\n"
"The valid parameters you can use are:\n"
"\n"
"  * `$time`     - time the log message was sent\n"
"  * `$date`     - date the log message was sent\n"
"  * `$message`  - the log message\n"
"  * `$level`    - the log level\n"
"  * `$node`     - the node that prints the message\n"
"  * `$metadata` - user controlled data presented in `\"key=val key2=val2\"` "
"format\n"
"  * `$levelpad` - set to a single space if level is 4 characters long,\n"
"    otherwise set to the empty space. Used to align the message after "
"level.\n"
"\n"
"Backends typically allow developers to supply such control\n"
"strings via configuration files. This module provides `compile/1`,\n"
"which compiles the string into a format for fast operations at\n"
"runtime and `format/5` to format the compiled pattern into an\n"
"actual IO data.\n"
"\n"
"## Metadata\n"
"\n"
"Metadata to be sent to the Logger can be read and written with\n"
"the `Logger.metadata/0` and `Logger.metadata/1` functions. For example,\n"
"you can set `Logger.metadata([user_id: 13])` to add user_id metadata\n"
"to the current process. The user can configure the backend to chose\n"
"which metadata it wants to print and it will replace the `$metadata`\n"
"value.\n"
msgstr ""
"ログにデータをフォーマットするのに便利なものです。\n"
"\n"
"このモジュールは開発者にログメッセージのための\n"
"テンプレートとして用いられる文字列を指定することが\n"
"できます。例えば:\n"
"\n"
"    $time $metadata[$level] $message\\n\n"
"\n"
"これは以下のようなエラーメッセージをプリントします:\n"
"\n"
"    18:43:12.439 user_id=13 [error] Hello\\n\n"
"\n"
"使用できる有効なパラメータは以下のとおりです:\n"
"\n"
"  * `$time`     - ログメッセージが送られた時刻\n"
"  * `$date`     - ログメッセージが送られた日付\n"
"  * `$message`  - ログメッセージ\n"
"  * `$level`    - ログレベル\n"
"  * `$node`     - メッセージをプリントするノード\n"
"  * `$metadata` - `\"key=val key2=val2\"`フォーマットで表現\n"
"    されるユーザにより制御されるデータ\n"
"  * `$levelpad` - レベルが4文字なら1つの空白にセットされ、\n"
"    それ以外は空の空白にセットされます。レベルの後のメッセージを\n"
"    整列させるために使います。\n"
"\n"
"backendは、一般的には開発者がコンフィグレーションファイル\n"
"を通じてそのような制御文字列を供給することを許します。この\n"
"モジュールは`compile/1`を提供します。それは実行時に高速の\n"
"オペレーションを行うために文字列をフォーマットにコンパイル\n"
"します。そして、`format/5`は実際のIOデータにコンパイルされ\n"
"たパターンをフォーマットします。\n"
"\n"
"## Metadata\n"
"\n"
"Loggerに送られたメタデータは`Logger.metadata/0`または\n"
"`Logger.metadata/1`で読み書きできます。例えば、user_idメタ\n"
"データを現在のプロセスに追加するために、\n"
"`Logger.metadata([user_id: 13])`を使うことができます。ユー\n"
"ザはbackendにどのメタデータをプリントするか、そしてどの\n"
"`$metadata`の値を置換するかを設定できます。\n"

#. TRANSLATORS: def Logger.Formatter.format(config, level, msg, ts, md)
#: lib/logger/formatter.ex:80
msgid ""
"Takes a compiled format and injects the, level, timestamp, message and\n"
"metadata listdict and returns a properly formatted string.\n"
msgstr ""
"コンパイルされたフォーマットを取り出し、level, timestamp,\n"
"messageとmetadataを注入してきちんとフォーマットされた文字列\n"
"を返します。\n"
